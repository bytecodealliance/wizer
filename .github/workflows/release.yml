name: Release
on:
  push:
    branches: [main]
    tags-ignore: [dev]
  pull_request:
defaults:
  run:
    shell: bash

# Cancel any in-flight jobs for the same PR/branch so there's only one active
# at a time
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
        - build: x86_64-linux
          os: ubuntu-latest
        - build: x86_64-macos
          os: macos-latest
        - build: aarch64-macos
          os: macos-latest
          target: aarch64-apple-darwin
        - build: x86_64-windows
          os: windows-latest
        - build: x86_64-mingw
          os: windows-latest
          target: x86_64-pc-windows-gnu
          
        # TODO: aarch64-linux and s390x-linux are commented out due to build errors
        # these errors are solved in a newer version of wasmtime, when wizer
        # updates to the newer wasmtime then we should uncomment these builds
          
        #src/arch/aarch64.S: Assembler messages:
        #src/arch/aarch64.S:21: Error: operand 1 should be a floating-point register -- `stp lr,fp,[sp,-16]!'
        #src/arch/aarch64.S:50: Error: operand 1 should be a floating-point register -- `ldp lr,fp,[sp],16'
        #src/arch/aarch64.S:90: Error: bad register expression
        #exit status: 1
        #- build: aarch64-linux
          #os: ubuntu-latest
          #target: aarch64-unknown-linux-gnu
          
        #/rust/lib/rustlib/s390x-unknown-linux-gnu/lib/libstd-f6c951af7877beaf.rlib(std-f6c951af7877beaf.std.e2801c51-cgu.0.rcgu.o): In function `std::sys::unix::rand::imp::getrandom_fill_bytes::hb641b796bca799e8':
        #/rustc/4b91a6ea7258a947e59c6522cd5898e7c0a6a88f/library/std/src/sys/unix/rand.rs:(.text._ZN3std3sys4unix4rand19hashmap_random_keys17h949023c83f75d545E+0x30): undefined reference to `getrandom'
        #/rust/lib/rustlib/s390x-unknown-linux-gnu/lib/libstd-f6c951af7877beaf.rlib(std-f6c951af7877beaf.std.e2801c51-cgu.0.rcgu.o): In function `std::sys::unix::rand::imp::getrandom::getrandom::h09b00f3fdb24c5b7':
        #/rustc/4b91a6ea7258a947e59c6522cd5898e7c0a6a88f/library/std/src/sys/unix/weak.rs:176: undefined reference to `getrandom'
        #/rustc/4b91a6ea7258a947e59c6522cd5898e7c0a6a88f/library/std/src/sys/unix/weak.rs:176: undefined reference to `getrandom'
        #collect2: error: ld returned 1 exit status
        #- build: s390x-linux
          #os: ubuntu-latest
          #target: s390x-unknown-linux-gnu
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - uses: ./.github/actions/install-rust
    - uses: ./.github/actions/binary-compatible-builds
      with:
        name: ${{ matrix.build }}
    - run: |
        echo CARGO_BUILD_TARGET=${{ matrix.target }} >> $GITHUB_ENV
        rustup target add ${{ matrix.target }}
      if: matrix.target != ''

    # Build `wizer` and executables
    - run: $CENTOS cargo build --release --locked --bin wizer --all-features

    # Assemble release artifats appropriate for this platform, then upload them
    # unconditionally to this workflow's files so we have a copy of them.
    - run: ./ci/build-tarballs.sh "${{ matrix.build }}" "${{ matrix.target }}"
    - uses: actions/upload-artifact@v1
      with:
        name: bins-${{ matrix.build }}
        path: dist
  publish:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      # Download all the artifacts that we'll be publishing. Should keep an eye on
      # the `download-artifact` repository to see if we can ever get something
      # like "download all artifacts" or "download this list of artifacts"
      - uses: actions/download-artifact@v1
        with:
          name: bins-x86_64-macos
          path: dist
      - uses: actions/download-artifact@v1
        with:
          name: bins-aarch64-macos
          path: dist
      - uses: actions/download-artifact@v1
        with:
          name: bins-x86_64-windows
          path: dist
      - uses: actions/download-artifact@v1
        with:
          name: bins-x86_64-mingw
          path: dist
      - uses: actions/download-artifact@v1
        with:
          name: bins-x86_64-linux
          path: dist

      - name: Calculate tag name
        run: |
          name=dev
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            name=${GITHUB_REF:10}
          fi
          echo ::set-output name=val::$name
          echo TAG=$name >> $GITHUB_ENV
        id: tagname

      # ... and if this was an actual push (tag or `main`) then we publish a
      # new release. This'll automatically publish a tag release or update `dev`
      # with this `sha`. Note that `continue-on-error` is set here so if this hits
      # a bug we can go back and fetch and upload the release ourselves.
      - run: cd .github/actions/github-release && npm install --production
      - name: Publish Release
        uses: ./.github/actions/github-release
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
        with:
          files: "dist/*"
          token: ${{ secrets.GITHUB_TOKEN }}
          name: ${{ steps.tagname.outputs.val }}
        continue-on-error: true
